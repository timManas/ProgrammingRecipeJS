
Notes
1. Remember: React reacts to state changes by re-rendering the UI
2. You cannot use if/else statements directly in JSX ... (this sucks =| ). You have to use ternary operatoes like this:
    ex: { isOpen ? TrueResult : FalseResult }
3. You can pass entire objects into props using the {}
4. props are basically like argument passed into JS functions
5. You can put JSX inside properties or between bodies
Ex:     
<li className={`pizza ${pizzaObj.soldOut ? 'sold-out' : ''}`}>
<h3>{pizzaObj.name}</h3>
5. You cant stringify due to cyclic object value,
> Use a reducer like this: getCircularReplacer()
> This a very common issue. Talked about in MDN
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value





Best Practices
1. Use Create-React-App for examples and small projects
2. For debugging, see if you can create a component tree
3. For defining class in JSX, you cannot use class ...use className
    Ex:     <div className='container' />
4. You can seperate the {children} from the component
Same component but you can customize the children inside of it
Ex: 
    <Button bgColor='#7950f2' textColor='#fff' onClick={handlePrevious}>
         <span>ðŸ‘ˆ</span> Previous
    </Button>

    <Button bgColor='#7950f2' textColor='#fff' onClick={handleNext}>
         Next <span>ðŸ‘‰</span>
        <span>ðŸ¤“</span>
    </Button>

    And in the JSx return the following:
    return <button> {children} </button>




Questions

Q18. How to find out what properties are in props ?
Use this:
  for (var key in props) {
    console.log(key + '     ' + props[key])
  }
Or use the Reducer outlined inthe 'Notes' above

Q17. What are common properties passed in the prop ?
- props.children : Any child elements inside the Component can be passed


Q16. What if you pass in empty props ?
- You can still access the props even if you dont pass anything in 
Ex: <Footer> </Footer>
But in function we can do this:
function Footer(props) {
    console.log(props)  // This would be empty
}

Q15. What are the rules of JSX ?
1. JSX works essentially like HTML but we can enter JS mode using '{...}' curly brackets
2. We can place JS expressions inside {}
i.e: reference variables, create arrays or objects, [].map, ternary operators
3. Statements are NOT allowed (i/else, for, switch)
4. JSX produces a JS expressions 
    - Can place other pieces of JSX inside {}
    - We can write JSX anywhere inside a component 
5. JSX can return only one root element. If you need more,
you can use emty <> </>
 

Q14. How to access the props passed to a component? 
Use the "props" keyword
Ex: props.name,  props.id, props.ingredients

Q13. How to send props to components?
- Need to do two things:
1. Send props through the parent componenet
Ex:  <Pizza pizzaObj={pizza}/>
2. Receive the props in the child compoenet
Ex: function Pizza({ pizzaObj }) {.....}

Q12. What are props ?
- Props are used to pass data from parent components to child
- Used to configure each unique components
- Anything can be passed as props (i.e single values, arrays, objects, functions and other components)
- Props are READ ONLY !!!! 
    > If you need to modify props ..then you should use STATE


Q12. What is JSX ? 
- Declarative syntax to describe what components looks like and how they works
    - Describes what UI should like like using JSX, based on current data
    - Abstraction away from DOM: Never touch the DOM
    - Reflection of the current data
- Componenets must return a block of JSX
- Extension of JS that allows us to embed JS, CSS and React compnenets into HTML
- Each JSX Element is converted Reaxt.createElement function call  (using BABEL)

Component_________
|      Data       |
| (Props & State) |
|      Logic      |
|    Appearance   |
|_________________|

Q11. What are components ? 
- Components are building blocks
- React made entirely out of components
- Each component has its own data, logic and appearance (how it works and looks)
- Components can be reused, nested inside other compoenets and pass data between them
- MUST return a block of JSX, in order to render to the UI (can also return null)

Q10. What is the purpose of StrictMode in React ?
1. Checks for outdated parts during build
2. Runs components twice to check for bugs

Q9. How to start react app ?
- npx run start

Q8. How to build a Create-react-app ?
- npx create-react-app NAMEOFAPP

Q7. what are Production grade React frameworks ?
1. Next.JS - Full stack React framework
2. Remix - Full stack React framework with nested routing

Q6. Pros and cos of Vite ?
1. Moder build tool that contains a template for setting up React Applications
2. Need to maually set up ESLint (and others)
3. Extremely fast hot module replacement and bundling

Q5. Pros and cons of Create-React-App ?
1. Complete starter kit for react Applications
2. Everything is already configured : ESLint, Prettier, Jest, etc
3. Slow and Outdated (i.e webpack)

Q4. What are the two options for setting up a react project? 
1. Create-react-app
2. Vite  



Q3. How is React state driven ?
1. State of data changes 
2. Cause a Render on UI
3. User updates the UI
4. Causes an update in State
5. State of data changes
6. Causes a Re-Render of the UI
7. Repeat ...

Remember: React reacts to state changes by re-rendering the UI


Q2. What is React ? 
- Declarative, component based, state driven JS library for building UI
- Never touches the DOM
- Main goal of react is to keep UI insync with the data

Q1. Why do FE Framework exists ?
1. Keep UI in sync with Data. (Very diffcult from vanilla JS to do this)
2. Enforce a correct way of structuring code
3. Give developers a consistent way to buildin FE Applications

- How do we figure out which dependency triggered the useEffect ?
