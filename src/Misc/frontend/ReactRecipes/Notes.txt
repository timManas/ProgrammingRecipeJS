
Notes
1. Remember: React reacts to state changes by re-rendering the UI
2. You cannot use if/else statements directly in JSX ... (this sucks =| ). You have to use ternary operatoes like this:
    ex: { isOpen ? TrueResult : FalseResult }
3. You can pass entire objects into props using the {}
4. props are basically like argument passed into JS functions
5. You can put JSX inside properties or between bodies
Ex:     
<li className={`pizza ${pizzaObj.soldOut ? 'sold-out' : ''}`}>
<h3>{pizzaObj.name}</h3>
5. You cant stringify due to cyclic object value,
> Use a reducer like this: getCircularReplacer()
> This a very common issue. Talked about in MDN
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value
6. Updating a component state will trigger an re-render
> why ? to keep UI insync with data
7. You can use the && for conditional rendering 
ex: {isOpen && ....}  - If isOpen is true, it will render the ..... If false, nothing will get displayed
8. Changes to STATE or PROPS will trigger a re-render








Best Practices
1. Use Create-React-App for examples and small projects
2. For debugging, see if you can create a component tree
3. For defining class in JSX, you cannot use class ...use className
    Ex:     <div className='container' />
4. You can seperate the {children} from the component
Same component but you can customize the children inside of it
Ex: 
    <Button bgColor='#7950f2' textColor='#fff' onClick={handlePrevious}>
         <span>ðŸ‘ˆ</span> Previous
    </Button>

    <Button bgColor='#7950f2' textColor='#fff' onClick={handleNext}>
         Next <span>ðŸ‘‰</span>
        <span>ðŸ¤“</span>
    </Button>

    And in the JSx return the following:
    return <button> {children} </button>
5. When creating properties like onClick, make sure to wrap in () => alert(...)
Ex: 
onClick={() => alert(....)}   CORRECT 
onClick={alert(...)}        BAD ...Dont do this

- If you dont add the '() =>' React will trigger this method constantly
The reason being is that when initliazing, react sees this component and triggers it right away
instead of waiting until the button is clicked
6. Do NOt update state using the variable.
- Use the setter instead
Ex: const[state, setState] = useState()
state = state.new       // THIS IS BAD ...DO NOT DO THIS
setState(state.new)     // Good practice

7. Download the React Dev Tools to show
- The component tree
- Profiler

8. When updating the state:
- Do NOT do this:
     setStep(step + 1)
- Instead do this:
    setStep((currentStep ) =>  currentStep + 1)

9.When creating a component, do the following:
1. Create all the child components in the same filter
2. Ensure code works
3. Refactor the parent component file by seperating the child component into seperate files

10. Best practice dictate, we like to keep track of the state inside one component.
Most likely the parent component which keeps track

11. Try minimizing the # of states in an app
> Try using derived state as much as you can. Why ? Because you dont want to update all the other state and keep them all in sync with each other


12. Use children props to pass elements from  Parent to Child Components
- Useful to display generic functionality with some customization

13. Do not modify initial arrays. Similar to props. We do not modify them
> Create a brand new one instead



Questions


Q39. What is a children prop ?
- Children prop allows us to pass JSX into an element (besides regular props)
- Essential tool thats makes code reuseable 
- Useful for generic component that dont know their content before being used
- Remember this is still ONE WAY data flow (parent to child)
    > So we can only pass child props to child components. Not reverse !!!


Q38. What is Derived state ? 
- State that is computed from an existing piece of STATE or from PROPS


Q37. When & Where to place state ?

Need to store Data  ------>   Will State change at some point ?  --- No --->  Place data in const variable
                                        |   
                                       Yes
                                        | 
                       Can be computed from existing state/props ?   --- Yes ---> Derived State
                                        |
                                       No 
                                        |
                        Should it re-rendered component ?    --- No ---> Ref (useRef)
                                        |   
                                       Yes
When to create state                    | 
--------------------      Place a new piece state in component (This is local state)
Where to place state                    |
                                        |
                            Only used by this component ?    --- Yes --->  Leave in component
                                        |
                                        No 
                                        |
                            Also used by child component ?   --- Yes ---> Pass state to child via props
                                        |
                                        No 
                                        |                                       
Set to Global state <--- No ---- Used by one of few siblinb component ?  --- Yes ---> Lift state up to first common parent





Q36. What is Global state ? 
- State that many components might need
- Shared state that is accessible to EVERY component  in the entire Applications
Ex: Conext API or Redux 

Q35. What are local state ?
- State needed only by one or few components
- State that is defined in a component and only that compnent and child components have access to it
- Should always start with LOCAL state

Q34. What is state management ? 
Deciding: 
- When to Create state
- Know what types of states are required
- Where to place each state
- How data flows through the app
 

Q33. How to "think" in React ? 
- Thinking about components, state, data flows, effects, etc
- Thinking in state transitions, not element mutations
- Follow the following process:
1. Break the desired UI into component and create a component tree (very useful)
2. Build a static version in react (without state) first
3. Decide on state management:
    - Think about state (when to use, type of state (local vs global), where to place each piece of state)
    - Establish Data Flow (One way data flow, child to parent communication, accessing global state)



Q32. Whats the difference between state and props ? 
1. State
- Internal data owned by component
- 'Memory' of the component
- Can be updated by the componenet itself
- Updating state causes a re-render
- Used to make componenets interactive

2. Props
- External data owned by the parent component
- Similar to function parameters
- Read-only
- Receiving new props will trigger a re-render



Q31. How to implement a controlled element ?
- Follow three steps
1. Create state for component
Ex: const [description, setDescription] = useState('')
2. Use state as value of specific component we want to control
Ex: value={description}
3. Use the setState to modify the state 
Ex: setDescription(e.target.value)


Q30. What is a controlled element ? 
> React who controls the state of the elements and not the DOM

Q29. What is event.preventDefault() ?
- Prevents the page from reload when a submit occurs
- Not part of React but part of JS

Q28. What is the event object ?
 > event object is an object which contains all info about  the current event


Q27. What are general 'state' guidelines ?
1. Each component has and manages it own state
2. Changes in one component SHOULD NOT affect other components 
3. Use a state variable for any data that the component needs to "remember" over time
4. Whenever you want something in component to be dynamic, update its state.
5. Update state if you want to change:
    - the way a component looks
    - the data it displays
6. When building a component, imagine its view as a reflection of state over time
7. For data that do not need re-renders, do NOT use state. Use a regular variable instead

Q26. What is the mechanic of an Re-render ?
1. User clicks on event handler (ex: onclick)
2. State is updated
3. React re-renders the view 
4. View is updated
5. UI is now insync with Data

Q25. What is unmounting ?
- When a component disappears from screen

Q24. What is re-rendering ?
- React calls the component function again
- Basically react removes the entire view and re-renders a new one

Q23. How is a componenet view updated when it is changed ? 
- This is due to state
- In react, a view is updated by re-rendering that specific component


Q22. How to identify hooks ? 
- Start with the word 'use' 
Ex: useEffect, useState, useReducer

Q21. What does state allows us to do ?
1. Update the components view (by re-rendering)
2. Persist local variables between renders

Q20. What is state ? 
- Data that component can hold over time.
- Think of it as components memory 
- Updating component state will TRIGGER react to re-render the component (i.e useEffect)
- State is what keeps the UI insync with the Data

***Q19. HOW TO PASS ARGUMENTS to a onClick ....
You will need to use an anonymous function to pass it in 
Ex:             
1. <Button onClick={() => onClickInnerButton(messages)}>
2. then on onClick
3. function onClickInnerButton(messages) {....}

Q18. How to find out what properties are in props ?
Use this:
  for (var key in props) {
    console.log(key + '     ' + props[key])
  }
Or use the Reducer outlined inthe 'Notes' above

Q17. What are common properties passed in the prop ?
- props.children : Any child elements inside the Component can be passed


Q16. What if you pass in empty props ?
- You can still access the props even if you dont pass anything in 
Ex: <Footer> </Footer>
But in function we can do this:
function Footer(props) {
    console.log(props)  // This would be empty
}

Q15. What are the rules of JSX ?
1. JSX works essentially like HTML but we can enter JS mode using '{...}' curly brackets
2. We can place JS expressions inside {}
i.e: reference variables, create arrays or objects, [].map, ternary operators
3. Statements are NOT allowed (i/else, for, switch)
4. JSX produces a JS expressions 
    - Can place other pieces of JSX inside {}
    - We can write JSX anywhere inside a component 
5. JSX can return only one root element. If you need more,
you can use emty <> </>
 

Q14. How to access the props passed to a component? 
Use the "props" keyword
Ex: props.name,  props.id, props.ingredients

Q13. How to send props to components?
- Need to do two things:
1. Send props through the parent componenet
Ex:  <Pizza pizzaObj={pizza}/>
2. Receive the props in the child compoenet
Ex: function Pizza({ pizzaObj }) {.....}

Q12. What are props ?
- Props are used to pass data from parent components to child
- Used to configure each unique components
- Anything can be passed as props (i.e single values, arrays, objects, functions and other components)
- Props are READ ONLY !!!! 
    > If you need to modify props ..then you should use STATE


Q12. What is JSX ? 
- Declarative syntax to describe what components looks like and how they works
    - Describes what UI should like like using JSX, based on current data
    - Abstraction away from DOM: Never touch the DOM
    - Reflection of the current data
- Componenets must return a block of JSX
- Extension of JS that allows us to embed JS, CSS and React compnenets into HTML
- Each JSX Element is converted Reaxt.createElement function call  (using BABEL)

Component_________
|      Data       |
| (Props & State) |
|      Logic      |
|    Appearance   |
|_________________|

Q11. What are components ? 
- Components are building blocks
- React made entirely out of components
- Each component has its own data, logic and appearance (how it works and looks)
- Components can be reused, nested inside other compoenets and pass data between them
- MUST return a block of JSX, in order to render to the UI (can also return null)

Q10. What is the purpose of StrictMode in React ?
1. Checks for outdated parts during build
2. Runs components twice to check for bugs

Q9. How to start react app ?
- npx run start

Q8. How to build a Create-react-app ?
- npx create-react-app NAMEOFAPP

Q7. what are Production grade React frameworks ?
1. Next.JS - Full stack React framework
2. Remix - Full stack React framework with nested routing

Q6. Pros and cos of Vite ?
1. Moder build tool that contains a template for setting up React Applications
2. Need to maually set up ESLint (and others)
3. Extremely fast hot module replacement and bundling

Q5. Pros and cons of Create-React-App ?
1. Complete starter kit for react Applications
2. Everything is already configured : ESLint, Prettier, Jest, etc
3. Slow and Outdated (i.e webpack)

Q4. What are the two options for setting up a react project? 
1. Create-react-app
2. Vite  



Q3. How is React state driven ?
1. State of data changes 
2. Cause a Render on UI
3. User updates the UI
4. Causes an update in State
5. State of data changes
6. Causes a Re-Render of the UI
7. Repeat ...

Remember: React reacts to state changes by re-rendering the UI


Q2. What is React ? 
- Declarative, component based, state driven JS library for building UI
- Never touches the DOM
- Main goal of react is to keep UI insync with the data

Q1. Why do FE Framework exists ?
1. Keep UI in sync with Data. (Very diffcult from vanilla JS to do this)
2. Enforce a correct way of structuring code
3. Give developers a consistent way to buildin FE Applications

- How do we figure out which dependency triggered the useEffect ?
