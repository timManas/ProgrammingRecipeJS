Programming Recipes NodeJS

Notes
1. In Node, each file is treated as a seperate module
2. Once we send a RESPONSE back to the user, the request-response cycle ends
    > Remember: Client sends a request -> Server sends a response ... thats it 
3. When we send next(), it continues down the route stack for a response. Once it finds it, 
it returns to the next() which started it all. Take a look at example in middleware start and end time
3. When you DESTRUCTURE an import, you can use the object directly
Ex: 
import { getFriends } from './controllers/friendscontroller.js'
Used in: 
app.get('/friends', getFriends)
4. Using clustering is NOT sa silver bullet for performance handling
- > We are limite by the # of process our machine can execute in parallel
5. You can pass in middleware individually when you define the route. It will run sequentially 
Ex:
app.get('/secret', checkLoggedIn, (req, res) => {
  res.send(`Secret value is 42`)
})


Best Practices
1. When dealing with CommonJS, you need to set extension to '.cjs' ex: Name.cjs
2. DO NOT use index.js to import several functions:
    Use direct approach instead (i.e import the direct path)
2. If you have deleted node_modules or corrupted it ?
> Just use npm install to get it back again. Good tip
3. Dont include node_modules in git. Add to gitignore
4. Important to commit the package-lock.json to prevent issues with diff devs installing different versions
5. Try to Destructure when importing instead of using * to avoid exposing other functions
Ex: Good Example
import {
  getFriends,
  getFriend,
  postFriend,
} from './controllers/friendscontroller.js'
Ex: Bad Example
import * as msgController from './controllers/messagecontroller.js'

6. Write jest test alongside any modules being tested
7. Use "jest --watch" to get instant feedback if your testcases are failing (similar to nodemon)
-> Holy shit ...INCREDILY USEFUL for TDD
8. Use Clustering to avoid performance bottlenecks
9. Use pm2 reload server to update servers once they are already in Production
    -> Literally ZERO-DOWNTIME
10. Use clustering in PRODUCTION compared to WORKER_THREADs 


TODO:
1. Create example using MongoDB, Mongoose  with CRUD 


Questions

Q110. How to setup social sign 
1. Setup Google Cloud account
2. Create new Project
3. Set Project Name
4. Once Project has been created, Click on Create credentials
5. Select OAuth Client Id
  - Select Application Type
  - Set Name
  - Set Authorized Javascript origin to full path of your domain: https://localhost:3000
  - Set Authorized redirect URI's to the callback of your endpoint: Ex: https:localhost:3000/auth/google/callback
6. Copy the following to your application
  1. ClientId
  2. ClientSecret

Q109. What is OAuth ? 
- Basically it is an authentication standard
- Enables things like social sign on

Q108. What are the different properties of a JWT Token ?
1. header
2. payload
3. signature 

Q107. What is Token Based Authentication ?
1. Client sends UserName/Password to Server
2. Server checks if username and password are correct, return Token if correct
3. Server returns HTTP 200 with access token JWT

4. Client sends API call with JWT token in header (Bearer)
5. Server verifies if token is valid, returns specific resouceuser
6. Server returns response back to the user
...
..
.


Q106. What are JSON Web Tokens ? 
- Also known as JWT
- Type of access token
  -> Similar to api keys that unique identify a specific user of an application
  -> Acts as credentials for the user
- Industry standard method for representing the claims between two parties


Q105. What is it purpose ?
1. Project Identification - Identigy the app or project thats making a call to the API
2. Project Authorization - Check whether the calling app has been granted to call the API or SDK 

Q104. What are API Keys ?
- Strings which grant user access to resources
- Server as credentials to websites

Q103. What is social sign on ?
- Ability to sign into websites using third party applications like gmail, hotmail, github, etc

Q102. What is Authorization ?
- Checks if user has permission has acceess resources ONCE they have been authenticated

Q101. What is Authentication ?
- Validates users are ..who they claim to be (ex: login/password)

Q100. Where do we add the helmet middleware ? 
- Generally for security we add it to the top BEFORE any of our routes

Q99. What is Helmet.js ? 
- npm package
- Helps secure Express apps by setting various HTTP headers
- Not a silver bullet but can help


Q98. Why am i gettting a "Your Connection is not private" ?
- Because the Certification authority is invalid
- Remember this is a self signed cert ....


Q97. What is rsa ? 

Q96. How to get a self signed certificate ?
1. Go to command line and type:
openssl req -x509 - newKey rsa:4096 -nodes -keyout key.pem -out cert.pem -days 365 
-x509 means it is a self signed certificate
-key.pem is the private key
-cert.pem is the ceritificate 
Note: When you execute this file, you need to ensure that the Common Nmae is the same name as your domain (ex: www.google.com)


Q95. Why do we need a self signed certificate ? 
Q94. What is OpenSSL ?

Q93. Why would you want to use http.createServer() ?
- https.createServer() has some benefits to using this function:
1. Pass in SSL Certificate in the createServer({}) using https (NOT http)
  -> This encrpyts the data through and from the server


Q92. What are the two ways to start up a node server ?
1. app.listen(PORT, () => {...})
2. http.createServer().listen(PORT, ()=> {...})


Q91. How does SSL/TLS secure HTTP connection?
- SSL/TLS takes the http and wraps it around an encrption 
Diageam

  SSL/TLS____   == https
  |___http___|
   
Q90. What is SSL Ceritificate and why is it used ?
- SSL Certificates are what enable websites to use https
- SSL Certificate is data file hosted in website origin server
- Ceritificates make SSL/TLS Encryption possible and contain the webites public key with other information



Q89. What is SSL ?
- Stands for Secure Sockets Layer
- We use SSL to encrpt the data between client & server

Q88. What is flow of events for mongoose and mongoDB ?
NodeJS --------> Model --------> Schema --------> Collection --------> Document
        Queries           uses           MapsTo 
Q87. Give me an example
const puppySchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  age: Number
});

const PuppyModel = mongoose.model('Puppy', puppySchema);

Q86. What is a model ?
- Modles take a schema and create an instance of a doucment equivalent to records in DB


Q85. What is Schema ?
- MongoDB is Schemaless
- A mongoose schema is a document data structure that is enforced via application layer

Q84. What are fields ?
- Also known as properties or attributes similar to columns in SQL

Q83. What are Documents ?
- Documents are equivalent to records or rows of Data in SQL


Q82. What is mongoose ?
- Mongoose is Object Data Modeling (ODM) library for MongoDB and NodeJS
- Manages the relationship between data, provides schema validation

Node JS  ----->   Mongoosse
   |                  |
   |                  |
MongoDB  <-----   MongoDriver




Q81. How to access a worker thread ?
const worker = require('worker_thread')

Q80. What is Worker Threads ? 
- It is a module which enables use of thread that execute JS in parallel
- Useful for CPU intentsive JS Operations 
- NodeJS build in async IO are more efficient than Workers can be

Q79. How to set ZERO-DOWNTIME using pm2 ? 
- Once cluster has been started: Do the following ->
1. Make changes to your code
2. Execute:
 pm2 reload server



Q78. How to bring a monitor view of pm2 ?
- pm2 monit

Q77. How to specify the log file name ?
- use the -l flag and name:
pm2 start server.js -l log.txt -i max
-> Notice logs.txt is now created in your root express folder

Q76. How to get the pm2 logs ?
- pm2 logs
- Displays logs continously

Q75. How to start a cluster in pm2 ?
pm2 start server.js -i max
- You should see something like this: 

┌────┬───────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐
│ id │ name      │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │
├────┼───────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤
│ 0  │ server    │ default     │ 1.0.0   │ cluster │ 3412     │ 0s     │ 0    │ online    │ 0%       │ 37.9mb   │ timmanas │ disabled │
│ 1  │ server    │ default     │ 1.0.0   │ cluster │ 3413     │ 0s     │ 0    │ online    │ 0%       │ 35.3mb   │ timmanas │ disabled │
│ 2  │ server    │ default     │ 1.0.0   │ cluster │ 3414     │ 0s     │ 0    │ online    │ 0%       │ 23.9mb   │ timmanas │ disabled │
│ 3  │ server    │ default     │ 1.0.0   │ cluster │ 3419     │ 0s     │ 0    │ online    │ 0%       │ 23.9mb   │ timmanas │ disabled │
└────┴───────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘

What is the -i flag ? 
- Starts the number of worker process 
valid values: 0 t0 max

Q74. Why do we want to use pm2 ?
- pm2 comes with clustering built in 
- Simplfiy our code and remove any clustering logic 
- No need to fork inside our code (i.e cluster.fork())
Ex: We can get rid of this: 
if (cluster.isPrimary) {
  console.log('Primarty has been started...')
  const NUM_WORKERS = os.cpus().length
  console.log('NumWorker ProcesS: ' + NUM_WORKERS)
  for (let i = 0; i < NUM_WORKERS; i++) {
    // Create a worker process
    cluster.fork()
  }
} else {
  console.log('Worker process started...')
  app.listen(PORT, () => {
    console.log(`Listening to Port ${PORT}`)
  })

And just replace it with this: 
app.listen(PORT, () => {
  console.log(`Listening to Port ${PORT}`)
})


Q73. How to delete a cluster on pm2?
- pm2 delete server 
or 
pm2 delete PID 

Q72. How to check status of pm2 ?
- pm2 status

Q71. How to stop pm2 ?
- pm2 stop PID 

Q70. How to start pm2 ?
Go to command line:
pm2 start server.js
Note: THIS WILL START express server. Similar to NodeMon
OR
pm2 start PID (PID # only if pm2 already has process registered)


Q69. What is a global module ? 

Q. How do install a global module ? 
- Use the -g argument to save as global module
npm install GLOBALMODULE -g

Q. Why a global module
- Allows us to execute a module from the commandline / environment

Q. when to install it globally ? 



Q68. What tools would be good at clustering ?
- Use PM2. 
- It is is process manager with built in load balancer.
- Allows to keep app alive forever, or reload them without any downtime

Q67. What is the fork() funciton in clustering ?
- Allows us to spin a new worker process to run our code
Ex:   cluster.fork()


Q66. Give me examples of Node Performance Enhancements ?
1. Cluster - Allows to make copies of Node process that run your server code side by side in parallel

Ex:
                                  |- fork() -> worker procecess
node server.js -> Master Process  |
                                  |- fork() -> worker procecess



Q65. How to impreove Node performance ?
- Divide work and spread load
- Create multiple copies of Node running side by side  in parallel

Q64. Give me a examples of real like blocking functions ? 
Ex: JSON.Stringify() & JSON.parse(), Sorting Arrays .sort()

Q63. What is supertest ?
- Node package which adds assertions in addition to jest

Q62. How does jest know where to run the test files ?
- It searches the application for any .spec.js  or .test.js files  then execute them

Q61a. What is "npm test-watch" ?
- Allows us to continous TEST API ....similar to nodemon
- Incredibly useful for TDD

Q61. How to setup jest tests ?
1. Create a test file either:
ABC.spec.js 
Or
ABC.test.js
2. Execute "npm jest" or "npm test-watch"
Ex: friendsRouter.test.js 


Q60. How to execute jest ?
- run: npm test

Q59. What is jest ?
- npm package
- Works on both FE and BE


Q58. What can we use to test API in node ?
-Involves different tools:
1. Test runner - Finds all the tests in project, runs through them and outputs result
2. Test fixtures - How test are organized by module and individual tests
3. Assertions - Verify expected result equals to output result
4. Mocking - Mocks Data without actually affecting production (ex: Mocking a DB)
Note: Use JEST to test Node 

Q57. How does express know how to look for index.js INSIDE the view folder ?
Basically this line:
- app.set('views', path.join(__dirname, 'views')) ß 
Sets the views of the application where it takes the applications views

Q56. What is the 'view engine' configuration ?
- This is the default engine extension 
Ex: app.set('view engine', 'hbs')


Q55. What is the 'view' configuration ?
- A directory or an array of directories for the application's views
Ex: app.set('views', path.join(__dirname, 'views'))


Q54. How do set a template engine on express?
1. node install template engine like hbs 
2. Use app.set() to set the application setting for the engine
Ex: 
app.set('view engine', 'hbs')
app.set('views', path.join(__dirname, 'views'))
3. Ensure you have html file converted to hbs templating engine (i.e should have .hbs extension)
4. Add the template render in hbs file
Ex: 
app.get('/', (req, res, next) => {
  // res.send('Hello World !')
  res.render('index', {
    title: 'Hello wolrd',
    caption: 'Quote for the Day',
  })
})


Q53. What does a template engine do ? 
- Templating engine replaces special keywords like {{title}} with actual values
on html documents sent by the server to be rendered by the browser
- This allows a more dynamic website
Ex: 
    <body>
        {{title}}
        <h1>Welcome</h1>
        <img src="images/Yesterday.png" alt="Yesterday">
    </img>


***Q52. How to send a static website using Express ?
- Use the express static file middleware.
Ex: 
app.use(express.static('public'))


Q51. What is RESTful API's ?
- Stands for "REpresentation State Transfer" 
- Standardization & Best Practices of how API's are created
- Endpoints (aka URL) are collections of data  ...to be modified or read
- Useful for Client & Server architecture
- Request are Stateless and cacheable
- Contains the following properties:
1. Collections (ex: /friends  or  /messages)
2. Use HTTP Methods (GET, POST, PUT, DELETE) to communication instruction
3. Use existing standards (HTTP, JSON, URL)


Q50. How to create a Router ? 
- Create a route using express.Router()
Ex: 
1. Create router
    const friendsRouter = express.Router()
2. Then we can do this:
    friendsRouter.get('/', getFriends)
3. Set app to use the Router    **** MAKE SURE YOU DECLARE THIS ROUTER ...otherwise it wont work
    app.use('/friends', friendsRouter)

Q. How does this work ?
If we get http:localhost:5000/friends GET request,
then we go to "getFriends" callback in #2. 
Why ? Because app.use('/friends') is a short form of app.get('/friends', getFriends)



Q49. Why do we use a Router ? 
- Break down app to be more modular


Q48. What is a Router ? 
- Router is like mini application, just like our express app
- Contains its own set of middleware and routes


Q47. What is the model view controller ? 
 1. Model - The controller updates the model to update elements
 Ex: Data Stored (DB), Functions we use to access the DB, Data how it used by the application

 2. View - Model modify the elements. These are the elements on the website, seen by the user
 Ex: Data presented back to the user. HTML Elements. API, JSON data sent back to the user

 3. Controller - User sends commands via request using Controller
 Ex: Code/Functions that react to the incoming request and sets the response accordingly

Q46. How to set up a middleware ? 
1. Create app.use((req,res,next) => {...})
Note - Middleware tend to use app.use

Q45. What is middleware ?
- A request handler with access to the application's request-response cycle

Q44. How to setup nodemon ?
1. Add a script to package.json to start nodemon
Ex:    "watch": "nodemon server.js",
2. Execute: npm run watch


Q43. What is devDependencies ?
- These dependencies are ONLY needed during development. NOT Production 

Q43. What is nodemon ?
- Stands for node monitor
- It monitors your project directory and automatically restarts your node application when it detects any changes. 

Q42. Do call backs contain arguments
- Yes, they can. Ex: app.get('/', (req,res) => {...})
Note - express callbacks can have 3 or 4 arguments
3 args - (req, res, next)
4 args - (err, req, res, next)

Q41. Why is callback used ?
- Allows us to write async calls 
- There is no need for us to block other chunks of code in order to print result


Q40. What is a callback function ?
- Syntax "function function_name(argument, callback)"
- Callback function Executes AFTER the function "function_name" finishes ...
1. function_name finishes 
then
2. Execute call back

*Q39. What is next() in (req, res, next) ?
- Basically passes control to the next middleware (i.e get/post/etc) stack
- Once we send a RESPONSE back to the user, the request-response cycle ends
    > Remember: Client sends a request -> Server sends a response ... thats it


Q38. Create a simple Express Web Server ?
> This is all you need

import express from 'express'

const app = express()
const PORT = 5000

app.get('/', (req, res) => {
  res.send('Hello World')
})

app.listen(PORT, () => {
  console.log(`Listening on port: ${PORT}`)
})



Q37. How to start a simple Express server ?
> npm start

Q36. What is CORS ?
- Stands for Cross Origin Resource Sharing


Q35. What is an origin ?
- Consist of three things: https:wwww.google.com/maps
1. Protocol - https
2. Host - www.google.com
3. port - 443
Once one of these three things are changed, we are no longer in same origin

Q34. What is Same Origin Policy ? 
- Prevents malicious users from stealing information
- Security feature by browsers that restricts what your browser will do


Q33. What is parameterized endpoint / route ? 
- Basically it is an endpoint which has a value
Ex: localhost:3000/friend/69 
Where 69 is the numberId which is parameterized (i.e the id of the friend we are looking for)

Q32. Whats the difference between package.json vs package-lock.json ?
package.json
- It is a metadata file that describes the project's dependencies, scripts, configuration, and other details.
- It is typically created and modified manually by the developer to manage the project's dependencies and configuration.
- It lists the required dependencies and their version ranges, but not the exact versions to be installed.
- It can be easily shared and committed to version control systems.

package-lock.json
It is a lockfile that provides an exact, deterministic list of all the installed packages and their dependencies, including their exact version numbers.
It is automatically generated by npm and updated whenever you install or update packages.


Q31. What is the package-lock.json file ?
- Ensure that the same dependencies are installed consistently across different environments
- Helps prevent issues with installing different package versions, which can lead to conflicts and error
- It is used to ensure that the same dependencies are installed consistently across different environments and prevent conflicts due to different versions being installed.
- It is not meant to be manually modified and should be committed to the version control system to ensure consistency across all team members.


Q30. What is the node_modules folder ? 
- List of files stored for node to use
- Whenever you use npm install, you download that package and save it to the node_modules package folder
- Anything you place in the package manager, should be saved in the node_modules
- Each folder (ex: axios constains the full source code of that package)
- Each folder in the node_modules, ALSO has their own package.json and that has a dependency which also gets downloaded in order to work
Ex: axios folder package.json contains dependency "follow-redirects"
    Notice you now also have a "follow_redirects" folder in your node_modules folder

Q29. Where do i find the proper command & name ?
- Check the npm website 
- Search for package
- It will give you the install command (Ex: npm i axios)

Q28. How to install a package ?
- Use npm
EX: npm i axios

Q27. Why do need to initialize npm to install a package ? 
- Because we need package.json which exists only for node packages


Q26. What is the difference between module vs package ? 
- Module:  Basically a file, which exports code 
- Package: Collection of modules that have been packaged together


Q25. What is npm ?
- Stands for "Node Packages Manager"
- Contains packages which are usuable code shared by other people
- Packages can be found on npmjs.com website

Q24. What is index.js ? 
- Special file in a folder
- Allows you to treat a folder as a module
- Allows you to export funcitons from many different modules that live in a folder 
    which can be referenced on a single point


Q23. Why do we want to use modules ?
1. Reuse existing code
2. Organize our code
3. Expose only funcitonality what will be used


Q22. What are node modules ?
- Break down code to smaller chunks 
- Make code easily reuseable 
- Ex: require("http") or require ("test@playwright")

Q21. What are the possible states of promises ?
1. Fullfilled
2. Rejected
3. Pending

Q20. What is a Promise ?
- A promise is an object that may produce a value some time in the future
- Has two outcomes:
> Resolved 
> UnResolved

Q19. How does the callback occur ?
- For example: setTimeout()
1. When we receieve a setTimeout, the call stack will send this to the webApi to be executed.
2. Once it finishes, it will put it in the callback stack.
3. Once the event loop starts again & the call stack is empty again,
    then we execute the callback 

Q18. What is hidden classes ? Why is it bad ?
Q17. What is inline caching ? Why is it bad ? 


Q16. How to write optimized code ?
- Minimize using the following:
    eval()
    arguments
    for in 
    with
    delete

Q15. What is inside the JS Engine ?
JS -> [ Parser -> AST -> Interpreter -> ByteCode -> Machine language Code 010101010
                           |-> Profile -> Compiler -> Optimized Code] -> Machine language Code 010101010
                Abstract Syntax Tree

Q14. What is the "events" module in node ? 
- Objects (called emitters) emit named events that cause Function objects (listeners) to be called
- Class "EventEmitters"

Q13. What is the Observer Design Pattern ?
- Involves using:
    Subject --|--> Observers
              |--> Observers
- Observers subsrcibe to the subject (target)
- Anything which happens to the subject, will notify all the Observers
- Each Observer can do different actions independently
- Used by Node event loop 
- The way Node uses observer pattern is by call back functions
- Ex: process.on('beforeExit, () => {console.log("Hello World")})


Q12. What is Node best at ?
- Serving asynchronous I/O calls in large quantity (This is due to the event loop utilizing the OS Kernel)
- For DB connections and calls

Q11. What are the different types of Timer Event Loop Phases?
1. setTimeout - Timeouts out a process
2. setInterval - Sets a funciton to be executed multiple times in an interval (compared to setTimeout which executes for a duration)
3. setImmediate - Timer executes immediately (but not really)

Q10. What are the Event Loop Phases ?
- Timers
- I/O callbacks
- setImmediate
- Close callbacks

Q9. What happens when the timer finishes (ex: setTimeout()?)
- Gets sent to the callback queue (aka event loop)
- This queue will then execute callbacks in a FIFO 

Q8. What is the event loop ?
- Part of the node run time
- Responsible for handling the callback functions asynchronously
- Remember that JS is a single thread language but can execute asynchronous calls with the help of Node
- lives in libUV

Q7. What is libUV ?
- Library which allows for asynchronous I/O

Q6. What is the NodeJS Internals ?
- Inside NodeJS, we have:
V8 JS Engine  ->  NodeJS API (ex: fs, http, path) -> NodeJS Bindings -> LibUV

Q5. How does JS run without browser ?
- Bascially the flow is:

JS File -> NodeJS (Chrome V8 Engine + libuv) -> Execution in computer

Q4. How to pass values in argument in node ?
- Type in:
    node hello.js arg1
Then you can access the argument by using
const argument = process.argv[2]        // why 2 ? Because 0 (node) and 1 (script name) are taken 

Q3. What is Node.JS REPL ?
- Stands for Read, Evaluate, Print & Loop
- Essentially, it reads the JS code and executes it. 
    Then prints the output to the user (if any) and loops again to the next line until end of file
- Also Known as the console ... just good for testing

Q2. What is Runtime ?
- Basically it is JS Environment

Q1. Why create Node ?
- So we can execute JS without the browser in our computers





Errors

1. Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
- Common error when trying to do something when you already sent the response on a request



Issues


Q1. Jest isnt running with ECMA6 ? What to do ?
1. Install : npm install --save-dev babel-jest
2. Add the following to your package.json under scripts:
    "test": "NODE_OPTIONS='--experimental-vm-modules --experimental-specifier-resolution=node' jest",

