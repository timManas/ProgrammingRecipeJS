Programming Recipes NodeJS

Notes
- In Node, each file is treated as a seperate module

Best Practices
- When dealing with CommonJS, you need to set extension to '.cjs' ex: Name.cjs
- DO NOT use index.js to import several functions:
    Use direct approach instead (i.e import the direct path)
- If you have deleted node_modules or corrupted it ?
> Just use npm install to get it back again. Good tip
- Dont include node_modules in git. Add to gitignore
- Important to commit the package-lock.json to prevent issues with diff devs installing different versions




Questions

Q36. What is CORS ?
- Stands for Cross Origin Resource Sharing


Q35. What is an origin ?
- Consist of three things: https:wwww.google.com/maps
1. Protocol - https
2. Host - www.google.com
3. port - 443
Once one of these three things are changed, we are no longer in same origin

Q34. What is Same Origin Policy ? 
- Prevents malicious users from stealing information
- Security feature by browsers that restricts what your browser will do


Q33. What is parameterized endpoint / route ? 
- Basically it is an endpoint which has a value
Ex: localhost:3000/friend/69 
Where 69 is the numberId which is parameterized (i.e the id of the friend we are looking for)

Q32. Whats the difference between package.json vs package-lock.json ?
package.json
- It is a metadata file that describes the project's dependencies, scripts, configuration, and other details.
- It is typically created and modified manually by the developer to manage the project's dependencies and configuration.
- It lists the required dependencies and their version ranges, but not the exact versions to be installed.
- It can be easily shared and committed to version control systems.

package-lock.json
It is a lockfile that provides an exact, deterministic list of all the installed packages and their dependencies, including their exact version numbers.
It is automatically generated by npm and updated whenever you install or update packages.


Q31. What is the package-lock.json file ?
- Ensure that the same dependencies are installed consistently across different environments
- Helps prevent issues with installing different package versions, which can lead to conflicts and error
- It is used to ensure that the same dependencies are installed consistently across different environments and prevent conflicts due to different versions being installed.
- It is not meant to be manually modified and should be committed to the version control system to ensure consistency across all team members.


Q30. What is the node_modules folder ? 
- List of files stored for node to use
- Whenever you use npm install, you download that package and save it to the node_modules package folder
- Anything you place in the package manager, should be saved in the node_modules
- Each folder (ex: axios constains the full source code of that package)
- Each folder in the node_modules, ALSO has their own package.json and that has a dependency which also gets downloaded in order to work
Ex: axios folder package.json contains dependency "follow-redirects"
    Notice you now also have a "follow_redirects" folder in your node_modules folder

Q29. Where do i find the proper command & name ?
- Check the npm website 
- Search for package
- It will give you the install command (Ex: npm i axios)

Q28. How to install a package ?
- Use npm
EX: npm i axios

Q27. Why do need to initialize npm to install a package ? 
- Because we need package.json which exists only for node packages


Q26. What is the difference between module vs package ? 
- Module:  Basically a file, which exports code 
- Package: Collection of modules that have been packaged together


Q25. What is npm ?
- Stands for "Node Packages Manager"
- Contains packages which are usuable code shared by other people
- Packages can be found on npmjs.com website

Q24. What is index.js ? 
- Special file in a folder
- Allows you to treat a folder as a module
- Allows you to export funcitons from many different modules that live in a folder 
    which can be referenced on a single point


Q23. Why do we want to use modules ?
1. Reuse existing code
2. Organize our code
3. Expose only funcitonality what will be used


Q22. What are node modules ?
- Break down code to smaller chunks 
- Make code easily reuseable 
- Ex: require("http") or require ("test@playwright")

Q21. What are the possible states of promises ?
1. Fullfilled
2. Rejected
3. Pending

Q20. What is a Promise ?
- A promise is an object that may produce a value some time in the future
- Has two outcomes:
> Resolved 
> UnResolved

Q19. How does the callback occur ?
- For example: setTimeout()
1. When we receieve a setTimeout, the call stack will send this to the webApi to be executed.
2. Once it finishes, it will put it in the callback stack.
3. Once the event loop starts again & the call stack is empty again,
    then we execute the callback 

Q18. What is hidden classes ? Why is it bad ?
Q17. What is inline caching ? Why is it bad ? 


Q16. How to write optimized code ?
- Minimize using the following:
    eval()
    arguments
    for in 
    with
    delete

Q15. What is inside the JS Engine ?
JS -> [ Parser -> AST -> Interpreter -> ByteCode -> Machine language Code 010101010
                           |-> Profile -> Compiler -> Optimized Code] -> Machine language Code 010101010
                Abstract Syntax Tree

Q14. What is the "events" module in node ? 
- Objects (called emitters) emit named events that cause Function objects (listeners) to be called
- Class "EventEmitters"

Q13. What is the Observer Design Pattern ?
- Involves using:
    Subject --|--> Observers
              |--> Observers
- Observers subsrcibe to the subject (target)
- Anything which happens to the subject, will notify all the Observers
- Each Observer can do different actions independently
- Used by Node event loop 
- The way Node uses observer pattern is by call back functions
- Ex: process.on('beforeExit, () => {console.log("Hello World")})


Q12. What is Node best at ?
- Serving asynchronous I/O calls in large quantity (This is due to the event loop utilizing the OS Kernel)
- For DB connections and calls

Q11. What are the different types of Timer Event Loop Phases?
1. setTimeout - Timeouts out a process
2. setInterval - Sets a funciton to be executed multiple times in an interval (compared to setTimeout which executes for a duration)
3. setImmediate - Timer executes immediately (but not really)

Q10. What are the Event Loop Phases ?
- Timers
- I/O callbacks
- setImmediate
- Close callbacks

Q9. What happens when the timer finishes (ex: setTimeout()?)
- Gets sent to the callback queue (aka event loop)
- This queue will then execute callbacks in a FIFO 

Q8. What is the event loop ?
- Part of the node run time
- Responsible for handling the callback functions asynchronously
- Remember that JS is a single thread language but can execute asynchronous calls with the help of Node
- lives in libUV

Q7. What is libUV ?
- Library which allows for asynchronous I/O

Q6. What is the NodeJS Internals ?
- Inside NodeJS, we have:
V8 JS Engine  ->  NodeJS API (ex: fs, http, path) -> NodeJS Bindings -> LibUV

Q5. How does JS run without browser ?
- Bascially the flow is:

JS File -> NodeJS (Chrome V8 Engine + libuv) -> Execution in computer

Q4. How to pass values in argument in node ?
- Type in:
    node hello.js arg1
Then you can access the argument by using
const argument = process.argv[2]        // why 2 ? Because 0 (node) and 1 (script name) are taken 

Q3. What is Node.JS REPL ?
- Stands for Read, Evaluate, Print & Loop
- Essentially, it reads the JS code and executes it. 
    Then prints the output to the user (if any) and loops again to the next line until end of file
- Also Known as the console ... just good for testing

Q2. What is Runtime ?
- Basically it is JS Environment

Q1. Why create Node ?
- So we can execute JS without the browser in our computers


